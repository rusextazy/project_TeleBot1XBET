from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup

from keyboards.keyboards_menu import kb_menu
from keyboards.keyboards import exit_oplatil
from lexicon import lexicon_ru

router = Router()


class REPLENISHMENT(StatesGroup):
    SUM = State()
    PROVER = State()
    ID = State()
    SCREEN = State()
    EXAMINATION = State()


@router.callback_query(F.data.in_(('mbank_popolnit', 'elkart_popolnit', 'opima_popolnit', 'terminal_popolnit')))
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data()
    if callback.data == 'mbank_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ MBANK')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'elkart_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–ª–∫–∞—Ä—Ç')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'opima_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'terminal_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ—Ä–º–∏–Ω–∞–ª')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    await state.set_state(REPLENISHMENT.PROVER)
    await callback.answer()


@router.message(REPLENISHMENT.PROVER)
async def get_prover_replenishment(msg: Message, state: FSMContext):
    await state.update_data(summa=msg.text)
    summa_rab_sum = await state.get_data()
    print(summa_rab_sum['summa'])
    await msg.answer(text="‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞‚ùóÔ∏è\n–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º\n—á–µ—Ä–µ–∑ –∫–∞–∫–æ–π –±–∞–Ω–∫ –í—ã "
                          "–ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ‚úÖ‚úÖ‚úÖ\n–ü—Ä–∏–º–µ—Ä: mbank, MBANK, –º–±–∞–Ω–∫, –ú–ë–ê–ù–ö")
    await state.set_state(REPLENISHMENT.SUM)


@router.message(REPLENISHMENT.SUM)
async def get_id_replenishment(msg: Message, state: FSMContext):
    await state.update_data(prover=msg.text)
    summa_rab_prov = await state.get_data()
    print(summa_rab_prov['prover'])
    summa_rab_sum = await state.get_data()
    if 0 < int(summa_rab_sum['summa']) <= 100000:
        await state.set_state(REPLENISHMENT.ID)
        photo = FSInputFile("photo/123.jpg")
        await msg.answer_photo(photo, caption="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID(–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –æ—Ç 1XBET)")
    else:
        await msg.answer(
            text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –æ—Ç 1 –¥–æ 100000 —Å–æ–º.', reply_markup=kb_menu)
        await state.clear()


@router.message(REPLENISHMENT.ID)
async def get_zp_replenishment(msg: Message, state: FSMContext):
    await state.update_data(id=msg.text)
    id_rab_id = await state.update_data()
    print(id_rab_id['id'])
    if int(id_rab_id['id']) > 0:
        await state.set_state(REPLENISHMENT.SCREEN)
        summa_rab_sum = await state.get_data()
        await msg.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {summa_rab_sum['summa']} —Å–æ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ \"–Ø –æ–ø–ª–∞—Ç–∏–ª\"",
            reply_markup=exit_oplatil)
        await msg.answer(text="+996-997-089-991")
    else:
        await msg.answer(
            text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.', reply_markup=kb_menu)
        await state.clear()


@router.message(REPLENISHMENT.SCREEN)
async def get_screen_replenishment(msg: Message, state: FSMContext):
    await state.update_data(skrin=msg.text)
    await state.set_state(REPLENISHMENT.EXAMINATION)
    await msg.answer(text=lexicon_ru.oplatil)


@router.message(REPLENISHMENT.EXAMINATION)
async def get_examination_replenishment(msg: Message, state: FSMContext):
    await state.update_data(language=msg.text)
    screen_replenishment = msg.photo[-1].file_id
    id_rab_id = await state.update_data()
    summa_rab_sum = await state.get_data()
    summa_rab_prov = await state.get_data()

    await msg.answer(lexicon_ru.oplata.format(id_xbet=id_rab_id['id'], summa=summa_rab_sum['summa'], sposob=summa_rab_prov['prover']))
    await msg.answer(text="‚ù§Ô∏è", reply_markup=kb_menu)
    await state.clear()
