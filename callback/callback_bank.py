from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup

from keyboards.keyboards_menu import kb_menu
from keyboards.keyboards import exit_oplatil, adms
from lexicon import lexicon_ru

router = Router()


class REPLENISHMENT(StatesGroup):
    SUM = State()
    PROVER = State()
    ID = State()
    SCREEN = State()
    EXAMINATION = State()


@router.callback_query(F.data.in_(('mbank_popolnit', 'elkart_popolnit', 'opima_popolnit', 'terminal_popolnit')))
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data()
    if callback.data == 'mbank_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ MBANK')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'elkart_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–ª–∫–∞—Ä—Ç')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'opima_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    elif callback.data == 'terminal_popolnit':
        await callback.message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ—Ä–º–∏–Ω–∞–ª')
        await callback.message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è COMüá∞üá¨')
    await state.set_state(REPLENISHMENT.PROVER)
    await callback.answer()


@router.callback_query(F.data.in_(('yes', 'no')))
async def process_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext):

    if callback.data == 'yes':
        await bot.send_message(chat_id=id_message, text="‚úÖ")
        await bot.send_message(chat_id=id_message, text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—á–µ—Ç –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!‚úÖ\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à—É –∫–∞—Å—Å—É!ü§ó")
        await bot.send_message(chat_id='-1001838527137', text=lexicon_ru.odobreno_adm_replenishment.format(id=id_message,
                                                                                                            name=chel_message,
                                                                                                            user=user_message))
    elif callback.data == 'no':
        await bot.send_message(chat_id=id_message, text="‚ùå")
        await bot.send_message(chat_id=id_message, text="–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª!‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
        await bot.send_message(chat_id='-1001838527137', text=lexicon_ru.otkloneno_adm_replenishment.format(id=id_message,
                                                                                                            name=chel_message,
                                                                                                            user=user_message))
    await callback.message.delete_reply_markup()
    await callback.answer()


@router.message(REPLENISHMENT.PROVER)
async def get_prover_replenishment(msg: Message, state: FSMContext):
    await state.update_data(summa=msg.text)
    summa_rab_sum = await state.get_data()
    print(summa_rab_sum['summa'])
    await msg.answer(text="‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞‚ùóÔ∏è\n–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º\n—á–µ—Ä–µ–∑ –∫–∞–∫–æ–π –±–∞–Ω–∫ –í—ã "
                          "–ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ‚úÖ‚úÖ‚úÖ\n–ü—Ä–∏–º–µ—Ä: mbank, MBANK, –º–±–∞–Ω–∫, –ú–ë–ê–ù–ö")
    await state.set_state(REPLENISHMENT.SUM)


@router.message(REPLENISHMENT.SUM)
async def get_id_replenishment(msg: Message, state: FSMContext):
    await state.update_data(prover=msg.text)
    summa_rab_prov = await state.get_data()
    print(summa_rab_prov['prover'])
    summa_rab_sum = await state.get_data()
    if 0 < int(summa_rab_sum['summa']) <= 100000:
        await state.set_state(REPLENISHMENT.ID)
        photo = FSInputFile("photo/123.jpg")
        await msg.answer_photo(photo, caption="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID(–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –æ—Ç 1XBET)")
    else:
        await msg.answer(
            text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –æ—Ç 1 –¥–æ 100000 —Å–æ–º.', reply_markup=kb_menu)
        await state.clear()


@router.message(REPLENISHMENT.ID)
async def get_zp_replenishment(msg: Message, state: FSMContext):
    await state.update_data(id=msg.text)
    id_rab_id = await state.update_data()
    print(id_rab_id['id'])
    if int(id_rab_id['id']) > 0:
        await state.set_state(REPLENISHMENT.SCREEN)
        summa_rab_sum = await state.get_data()
        await msg.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {summa_rab_sum['summa']} —Å–æ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ \"–Ø –æ–ø–ª–∞—Ç–∏–ª\"",
            reply_markup=exit_oplatil)
        await msg.answer(text="+996-997-089-991")
    else:
        await msg.answer(
            text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.', reply_markup=kb_menu)
        await state.clear()


@router.message(REPLENISHMENT.SCREEN)
async def get_screen_replenishment(msg: Message, state: FSMContext):
    await state.update_data(skrin=msg.text)
    await state.set_state(REPLENISHMENT.EXAMINATION)
    await msg.answer(text=lexicon_ru.oplatil)


@router.message(REPLENISHMENT.EXAMINATION)
async def get_examination_replenishment(msg: Message, bot: Bot, state: FSMContext):
    await state.update_data(language=msg.text)
    screen_replenishment = msg.photo[-1].file_id
    id_rab_id = await state.update_data()
    summa_rab_sum = await state.get_data()
    summa_rab_prov = await state.get_data()
    await msg.answer(lexicon_ru.oplata.format(id_xbet=id_rab_id['id'], summa=summa_rab_sum['summa'], sposob=summa_rab_prov['prover']))
    await msg.answer(text="‚ù§Ô∏è", reply_markup=kb_menu)
    await bot.send_message(chat_id='-1001838527137',
                           text=lexicon_ru.proverk_adm_replenishment.format(id=msg.from_user.id, name=msg.from_user.full_name,
                                                              user=msg.from_user.username, id_1xbet=id_rab_id['id'],
                                                              summa=summa_rab_sum['summa'], sposob=summa_rab_prov['prover']), reply_markup=adms)
    await bot.send_photo(chat_id='-1001838527137', photo=screen_replenishment)
    global id_message
    id_message = msg.chat.id
    global chel_message
    chel_message = msg.from_user.full_name
    global user_message
    user_message = msg.from_user.username
    await state.clear()


#–ò–°–ü–†–ê–í–ò–¢–¨ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï